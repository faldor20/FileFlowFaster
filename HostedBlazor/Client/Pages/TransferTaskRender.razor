
@using static SharedFs.SharedTypes;
@using HostedBlazor.Data
@using blaz.Data
@using System
@using BlazorComponentUtilities
@inject DataGetter Getter
@code{
    [Parameter]
    public string groupName{get;set;}
    [Parameter]
    public List<TransferData> CopyTasks{get;set;}
}
@* @{
    Getter.newData += ()=> {this.StateHasChanged();};
} *@
@for (int i = CopyTasks.Count - 1; i >= 0 ; i--)
    { var task= CopyTasks[i];
            
				var type=task.Status switch 
                {
                    TransferStatus.Complete => Color.Success,
                    TransferStatus.Copying=>Color.Primary,
                    TransferStatus.Waiting=>Color.Warning,
                    TransferStatus.Cancelled=>Color.Dark,
                    TransferStatus.Failed=>Color.Danger,
                };
                var title=task.Status switch 
                {
                    TransferStatus.Complete => "Complete",
                    TransferStatus.Copying=>"Moving",
                    TransferStatus.Waiting=>"Waiting to Start",
                    TransferStatus.Cancelled=>"Canceled",
                    TransferStatus.Failed=>"Failed",
                };
                string speed=task.Status switch 
                {
                    TransferStatus.Complete =>"Average Speed = "+ (task.FileSize/(task.EndTime-task.StartTime).TotalSeconds).ToString("0.0"),
                    _ =>task.Speed.ToString("0.0"),
                };
                var etaSecs=(double)(task.FileRemaining/task.Speed);
                string etaString;
                if(etaSecs>3600){
                   etaString= "ETA "+ ">1 hour";  
                }
                else if(etaSecs>1){
                    var eta= TimeSpan.FromSeconds(etaSecs);
                    etaString="ETA "+ eta.Minutes+":"+eta.Seconds;
                }
                else if(task.Status==TransferStatus.Complete) etaString="Took: "+((task.EndTime-task.StartTime).ToString("hh\\:mm\\:ss"));
                else
                {
                    etaString="ETA "+"Not Started";
                }
                var fileName= task.Source.Split('\\')[^1];
                string destination;
                if(task.Destination.Contains('@'))destination= task.Destination.Split('@')[1];
                else destination=task.Destination;
                <BSAlert Color="@type">
                    <p><h3><BSBadge Color="Color.Secondary">@title</BSBadge>  @fileName | @(task.FileSize)MB</h3></p> 

                    <h4> <BSBadge Color="Color.Secondary">From</BSBadge> | @task.Source.Remove(task.Source.Length- fileName.Length) | <BSBadge Color="Color.Secondary">--></BSBadge>  | @destination |</h4>
                    <div>@task.Percentage.ToString("0") % Complete | Started: @task.StartTime.ToString("dd/MMM  HH:mm:ss")
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: @task.Percentage%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                    
                    <div>@speed MB/s    |  @etaString  @if(task.Status== TransferStatus.Copying){<BSButton style="float: right;"  Color="@Color.Danger" OnClick="@(async e=> await Getter.Cancel(groupName,task.id))">Cancel</BSButton>}  </div>
                </BSAlert>
            }

