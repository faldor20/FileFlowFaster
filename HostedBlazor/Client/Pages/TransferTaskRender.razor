
@using static SharedFs.SharedTypes;
@using HostedBlazor.Data
@using blaz.Data
@using System
@using BlazorComponentUtilities
@inject DataGetter Getter
@code{
    [Parameter]
    public int index{get;set;}
    [Parameter]
    public int[] Groups{get;set;}
    [Parameter]
    public string UserName{get;set;}
    public SlidingArray etaArray = new SlidingArray(5);
    private int id=0;
    protected override async Task OnInitializedAsync()
    {  
        var task=Getter.CopyTasks[UserName].TransferDataList[index];
        id=task.jobID;
        if(!Getter.ComponentUpdateEvents.ContainsKey(UserName)) Getter.ComponentUpdateEvents[UserName]=new Dictionary<int,Action>();
        void changed () {
            this.StateHasChanged();
          //  Console.WriteLine("state changed for user: "+UserName+" Id:"+id);
        }
        Console.WriteLine("setup event trigger to update job with user: "+UserName +" and jobid: "+id);
        Getter.ComponentUpdateEvents[UserName][id] = changed;

    }
}

             @{if(Getter.CopyTasks[UserName].TransferDataList.ContainsKey(index)){
                var task=Getter.CopyTasks[UserName].TransferDataList[index];
                if(index!=id){
                    Console.WriteLine($"updating event beuase index{index} doesn not match id{id}");
                    id=index;
                    if(!Getter.ComponentUpdateEvents.ContainsKey(UserName)) Getter.ComponentUpdateEvents[UserName]=new Dictionary<int,Action>();
                    void changed () {
                        this.StateHasChanged();
                      //  Console.WriteLine("state changed for user: "+UserName+" Id:"+id);
                    }
                    Console.WriteLine("setup event trigger to update job with user: "+UserName +" and jobid: "+id);
                    Getter.ComponentUpdateEvents[UserName][id] = changed;
                }
                 var type=task.Status switch
                 {
                     TransferStatus.Unavailable=>Color.Info,
                     TransferStatus.Complete => Color.Success,
                     TransferStatus.Copying=>Color.Primary,
                     TransferStatus.Waiting=>Color.Warning,
                     TransferStatus.Cancelled=>Color.Dark,
                     TransferStatus.Failed=>Color.Danger,
                     
                 };
                 var title=task.Status switch
                 {   TransferStatus.Unavailable=>"File not fully written",
                     TransferStatus.Complete => "Complete",
                     TransferStatus.Copying=>"Moving",
                     TransferStatus.Waiting=>"Waiting to Start",
                     TransferStatus.Cancelled=>"Canceled",
                     TransferStatus.Failed=>"Failed",
                 };
                 var icon=task.TransferType switch{
                     
                     TransferTypes.FTPtoFTP=>"=>\n<=",
                     TransferTypes.FTPtoLocal=>"=>",
                     TransferTypes.LocaltoFTP=>"<=",
                     TransferTypes.LocaltoLocal=>"V",

                 };
                 string speed=task.Status switch
                 {
                     TransferStatus.Complete =>"Average Speed = "+ (task.FileSize/(task.EndTime-task.StartTime).TotalSeconds).ToString("0.0"),
                     _ =>task.Speed.ToString("0.0"),
                 };
                 var etaSecs=(double)(task.FileRemaining/task.Speed);
                 string etaString;
                 if(etaSecs>3600){
                     etaString= "ETA "+ ">1 hour";
                 }
                 else if(etaSecs>1){
                    etaArray.AddEta(etaSecs);
                     var eta= TimeSpan.FromSeconds(etaArray.average);
                     etaString="ETA "+ eta.Minutes+":"+eta.Seconds;
                 }
                 else if(task.Status==TransferStatus.Complete){ etaString="Took: "+((task.EndTime-task.StartTime).ToString("hh\\:mm\\:ss"));}
                 else
                 {
                     etaString="ETA "+"Not Started";
                 }
                 var fileName = System.IO.Path.GetFileName(task.Source);
                 string destination;
                 if(task.Destination.Contains('@')) destination= task.Destination.Split('@')[1];
                 else destination=task.Destination;
                <BSAlert Color="@type">
                    <div style="display: flex;">
                        
                    <h2 style="margin-right: 1rem;">
                    @icon 
                    </h2>
                    <div>
                    <h5>
                        <span ><BSBadge Color="Color.Secondary">@title</BSBadge>  @fileName | @(Math.Round( task.FileSize,1))MB || </span> <span style="font-size: 17px">{ @task.Source.Remove(task.Source.Length - fileName.Length) } <BSBadge Color="Color.Secondary">-></BSBadge>  { @destination }</span>
                    </h5>
                    <div>@task.Percentage.ToString("0") % Complete | @speed MB/s  |  @etaString  @if(task.Status== TransferStatus.Copying||task.Status==TransferStatus.Waiting){<BSButton style="float: right;"  Color="@Color.Danger" OnClick="@(async e=> await Getter.Cancel(UserName, task.jobID))">Cancel</BSButton>} | Started: @task.StartTime.ToString("dd/MMM  HH:mm:ss")
                        <div class="progress"> 
                            <div class="progress-bar" role="progressbar" style="width: @task.Percentage%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div></div>
                    </div>
                  
                </BSAlert>
            }}

