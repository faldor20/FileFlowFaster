@page "/FetchDataSignalR"
@using System.Collections.Generic
@using blaz.Data
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.SignalR;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.SignalR.Client;
@using System;
@using Microsoft.Extensions.DependencyInjection;
@using System.Threading
@using SharedData
@* @using static SharedData.Data; *@
<h1>Transfer Monitoring</h1>


@if (status==Status.Loading)
{
    <p><em>Loading...</em></p>
}
else if (status==Status.NoConnection){
<p><em>Connot Connect to server</em></p>
}
else if (status==Status.DataError){
<p><em>Data recieved is malformed</em></p>
}
else
{
    <table class="table">

        <div>   
            @foreach (var task in CopyTasks)
            {

				var type=task.Status switch 
                {
                    TransferStatus.Complete => Color.Success,
                    TransferStatus.Copying=>Color.Primary,
                    TransferStatus.Waiting=>Color.Warning,
                    TransferStatus.Cancelled=>Color.Dark,
                    TransferStatus.Failed=>Color.Danger,
                };
                var title=task.Status switch 
                {
                    TransferStatus.Complete => "Complete",
                    TransferStatus.Copying=>"Moving",
                    TransferStatus.Waiting=>"Waiting to Start",
                    TransferStatus.Cancelled=>"Canceled",
                    TransferStatus.Failed=>"Failed",
                };
                var etaSecs=(double)(task.FileRemaining/task.Speed);
                string etaString="Not Started";
                if(etaSecs>3600){
                   etaString= ">1 hour";  
                }
                else if(etaSecs>0.1){
                    var eta= TimeSpan.FromSeconds(etaSecs);
                    etaString= eta.Minutes+":"+eta.Seconds;
                }
                else if(task.Status==TransferStatus.Complete) etaString="Done";
                var fileName= task.Source.Split('\\')[^1];
                <BSAlert Color="@type">
                    <h3>@title @fileName</h3>
                    <h4>From | @task.Source.Remove(task.Source.Length- fileName.Length) | -> | @task.Destination |</h4>
                    <div>@task.Percentage % Complete
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: @task.Percentage%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                    
                    <div>@task.Speed MB/s    |   ETA @etaString  <BSButton style="float: right;"  Color="@Color.Danger" OnClick="@(async e=> await Cancel(task.id))">Cancel</BSButton>  </div>
                </BSAlert>
            }
            
        </div>
    </table>
}
@code {
	private TransferData[] CopyTasks = null;

    
	private Status status = Status.Loading;
	private HubConnection hubConnection;
	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl("http://localhost:8085/datahub")
			.AddJsonProtocol()
			.Build();

		hubConnection.On<TransferData[]>("ReceiveData", dataList =>
		{
			CopyTasks =dataList.OrderByDescending(transfer=> transfer.StartTime).ToArray();
           
           //LOGGING: Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(dataList));
			 
			status = Status.Connected;
			StateHasChanged();
		});
		hubConnection.On<string>("Testing", confirmed => { Console.WriteLine(confirmed); status = Status.Connected; });
		await hubConnection.StartAsync();

		await ContinuousSend();
	}
    Task Cancel(Guid id)=>
        hubConnection.SendAsync("CancelTransfer",id);
	Task Send() =>
		hubConnection.SendAsync("GetTransferData");
	Task Confirm() =>
		hubConnection.SendAsync("GetConfirmation");

	async Task ContinuousSend()
	{

		while (true)
		{
			if (IsConnected)
			{
				//	await Confirm();
				await Send();

			}
            else
            {
                Console.WriteLine("notconnected via SignalR");
            }
			await Task.Delay(500);
		}

	}

	public bool IsConnected =>
		hubConnection.State == HubConnectionState.Connected;

	public void Dispose()
	{
		_ = hubConnection.DisposeAsync();
	}
}
