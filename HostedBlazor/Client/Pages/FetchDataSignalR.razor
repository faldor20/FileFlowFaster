@page "/{Group}"
@page "/{Group}/{User}"
@page "/"
@using System.Collections.Generic
@using blaz.Data
@using System;
@using System.Threading
@using System.Threading.Tasks
@using static SharedFs.SharedTypes;
@using System.Linq
@using HostedBlazor.Data
@inject DataGetter Getter
@inject NavigationManager UriHelper  
@code{
    [Parameter]
    public string Group { get; set; }
    [Parameter]
    public string User { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Group = Group ?? "All";
        User = User ?? " ";
        Getter.newData += StateHasChanged;
    }
    /* /* List<TransferData> GetApropriateData()
    {
    if (Group == "All")
    {   var tasks=Getter.CopyTasks.Values.SelectMany(x => x.Values.SelectMany(x => x)).OrderBy(transData => transData.ScheduledTime).ToList();
        Console.WriteLine("loading all tasks. Count= "+tasks.Count);
        return tasks;
    }
    else if(Getter.CopyTasks[Group].ContainsKey(Group))
    {
        if (Getter.CopyTasks[Group].ContainsKey(User))
        {
            var tasks=Getter.CopyTasks[Group][User];
            Console.WriteLine("loading Group:"+Group+" User: "+User+ " tasks. Count= "+tasks.Count);
            return tasks;
        }
        else
        {   var tasks= Getter.CopyTasks[Group].Values.SelectMany(x => x).OrderBy(transData => transData.ScheduledTime).ToList();
            Console.WriteLine("loading Group:"+Group+ " tasks. Count= "+tasks.Count);
            return tasks;
        }
    }
    else
    {
       return new List<TransferData>();
    }

    } */ 
}

<h1>Transfer Monitoring</h1>
<p>Connected to transfer server at: @Getter.transferServerUrl</p>

@if (Getter.status==Status.Loading)
{
    <p><em>Loading...</em></p>
}
else if (Getter.status==Status.NoConnection){
<p><em>Connot Connect to server</em></p>
}
else if (Getter.status==Status.DataError){
<p><em>Data recieved is malformed</em></p>
}
else
{
<table class="table">
    <div>
        
        @if(Group==""||Group==null)
        {
            UriHelper.NavigateTo("/All");
        }
        else
        {

            if (Group == "All")
            {   var tasks=Getter.CopyTasks.Values.SelectMany(x => x.Values.SelectMany(x => x)).OrderBy(transData => transData.ScheduledTime).ToList();
                Console.WriteLine("loading all tasks. Count= "+tasks.Count);
                foreach(var group in Getter.CopyTasks){
                    foreach(var user in  group.Value){
                      
                        foreach (var task in user.Value)
                        {
                            <TransferTaskRender task="@task" groupName="@group.Key"userName="@user.Key" />
                        }
                        
                    }
                }
            }
            else if(Getter.CopyTasks.ContainsKey(Group))
            {
                if (Getter.CopyTasks[Group].ContainsKey(User??" "))
                {   Console.WriteLine("loading user tasks");
                    foreach (var task in Getter.CopyTasks[Group][User])
                                {
                                    <TransferTaskRender task="@task" groupName="@Group"userName="@User" />
                                }
                            
                }
                else
                {   Console.WriteLine("loading group tasks");
                    foreach(var user in Getter.CopyTasks[Group]){
                        
                                foreach (var task in user.Value)
                                {
                                    <TransferTaskRender task="@task" groupName="@Group"userName="@user.Key" />
                                }
                            
                                }
                }
            }
        }
        else
        {
          
        }

       
        
    </div>
</table>
}

