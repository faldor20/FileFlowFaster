@page "/{Group}"
@page "/{Group}/{User}"
@page "/"
@using System.Collections.Generic
@using blaz.Data
@using System;
@using System.Threading
@using System.Threading.Tasks
@using static SharedFs.SharedTypes;
@using System.Linq
@using HostedBlazor.Data
@inject DataGetter Getter
@inject NavigationManager UriHelper  

@code{
    
    [Parameter]
    public string Group { get; set; }
    [Parameter]
    public string User { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Group = Group ?? "All";
        User = User ?? " ";
        Getter.newData += this.StateHasChanged;
    } 
}

<h1>Transfer Monitoring</h1>
<p>Connected to transfer server at: @Getter.transferServerUrl</p>

@if (Getter.status==Status.Loading)
{
    <p><em>Loading...</em></p>
}
else if (Getter.status==Status.NoConnection){
<p><em>Connot Connect to server</em></p>
}
else if (Getter.status==Status.DataError){
<p><em>Data recieved is malformed</em></p>
}
else
{
<table class="table">
    <div>
        <ol>
            @if(Group==""||Group==null)
            {
                
                UriHelper.NavigateTo("/All");
            }
            else if (Group == "All")
            {  
                var tasks=Getter.CopyTasks.SelectMany(group => group.Value.SelectMany(user => user.Value.Select(task=>(group:group.Key,user:user.Key,task:task.Key,scheduledTime:task.Value.ScheduledTime)))) .OrderByDescending(data => data.scheduledTime).ToList();
                Console.WriteLine("loading all tasks. Count= "+tasks.Count);
                foreach (var task in tasks)
                {   
                    <TransferTaskRender index="@task.task" groupName="@task.group"userName="@task.user" > </TransferTaskRender>
                    
                } 
            }
            else if(Getter.CopyTasks.ContainsKey(Group))
            {
                if (Getter.CopyTasks[Group].ContainsKey(User??" "))
                {   
                    Console.WriteLine("loading user tasks");
                    for (int i = Getter.CopyTasks[Group][User].Count - 1; i >= 0 ; i--)
                    {
                        <TransferTaskRender index="@i" groupName="@Group"userName="@User" ></TransferTaskRender>
                    }
                            
                }
                else
                {   
                    Console.WriteLine("loading group tasks");
                    var tasks=Getter.CopyTasks[Group].SelectMany(user => user.Value.Select(task=>(group:Group,user:user.Key,task:task.Key,scheduledTime:task.Value.ScheduledTime))).OrderByDescending(data => data.scheduledTime).ToList();
                    foreach (var task in tasks)
                    {
                        <TransferTaskRender index="@task.task" groupName="@task.group"userName="@task.user" ></TransferTaskRender>
                    }
                }
            }
        
        </ol>
    </div>
</table>
}

