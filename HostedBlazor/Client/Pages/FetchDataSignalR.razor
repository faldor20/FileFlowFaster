@page "/JobList/{User}/{GroupString}"
@page "/JobList/{User}/"
@page "/JobList/"
@using System.Collections.Generic
@using blaz.Data
@using System;
@using System.Threading
@using System.Threading.Tasks
@using static SharedFs.SharedTypes;
@using System.Linq
@using HostedBlazor.Data
@inject DataGetter Getter
@inject NavigationManager UriHelper  

@code{
    
    [Parameter]
    public string GroupString { get; set; }

    [Parameter]
    public string User { get; set; }
    
    public int Group;
    protected override async Task OnInitializedAsync()
    {
        int.TryParse(GroupString,out Group);
        User = User ?? " ";
        Getter.newData += this.StateHasChanged;
    } 
}

<h1>Transfer Monitoring</h1>
<p>Connected to transfer server at: @Getter.transferServerUrl</p>

@if (Getter.status==Status.Loading)
{
    <p><em>Loading...</em></p>
}
else if (Getter.status==Status.NoConnection){
<p><em>Connot Connect to server</em></p>
}
else if (Getter.status==Status.DataError){
<p><em>Data recieved is malformed</em></p>
}
else
{
<table class="table">
    <div>
        <ol>
            @if(User==null)
            {
                
                UriHelper.NavigateTo("/JobList/Users");
            }
            else if (User == "All")
            {  
                var tasks=Getter.CopyTasks.SelectMany(user => user.Value.Jobs.Select(task=>(user:user.Key,task:task.JobID,scheduledTime:user.Value.TransferDataList[task.JobID].ScheduledTime))).OrderByDescending(data => data.scheduledTime).ToList();
                Console.WriteLine("loading all tasks. Count= "+tasks.Count);
                foreach (var task in tasks)
                {   
                    <TransferTaskRender index="@task.task" userName="@task.user" > </TransferTaskRender>
                    
                } 
            }
            else{
               @*  var tasks= User switch 
                {   
                    ""=>Getter.CopyTasks.Select(x=>(x.Value.Jobs, x.Value.TransferDataList)),
                    _=>  new[] { (Getter.CopyTasks[User].Jobs,Getter.CopyTasks[User].TransferDataList)}
                        

                };
                
                var jobs=tasks.SelectMany(x=>x.Jobs);
                var transData=tasks.SelectMany(x=>x.TransferDataList)
                var job= new Tuple<int,int[]>[];
                foreach (var item in tasks)
                {
                    item.Jobs
                }  *@
                var uiData= Getter.CopyTasks[User];
                if(Group==-1){
                foreach (var task in uiData.Jobs)
                {   
                    <TransferTaskRender index="@task.JobID" userName="@User" > </TransferTaskRender>
                } 
                }
                else
                {
                    var jobs=uiData.Jobs.Where(x=> x.RequiredTokens.Contains(Group));
                    foreach (var task in jobs)
                    {   
                        <TransferTaskRender index="@task.JobID" userName="@User" > </TransferTaskRender>
                    } 
                }
                }


                
            
        
        </ol>
    </div>
</table>
}

