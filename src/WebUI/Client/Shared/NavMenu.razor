@using WebUI.Data;
@using blaz.Data;
@using static SharedFs.SharedTypes;
@inject DataGetter Getter
@inject NavigationManager UriHelper  

@{  void wrap( Dictionary<int ,List<int>>[] heirachy,string userString ,UIData uiData){

        void ListOp (List<int> belowGroups,int currentGroup, int currentIndex){
            string userUrl= "/JobList/"+userString+"/"+currentGroup;
            if(heirachy.Length>currentIndex+1){
                <li class="nav-item px-1">
                <NavLink class="nav-link" href="@userUrl" @onclick="(()=>{selections[currentIndex]=currentGroup; selections[currentIndex+1]=-1;})">
                     @(uiData.Mapping[currentGroup]+">")
                </NavLink>
                </li>
                
            @if( selections[currentIndex]==currentGroup){
                <ul class="nav-list ">
                    @foreach (var group in belowGroups)
                    {
                        ListOp (heirachy[currentIndex+1][group],group, currentIndex+1 );
                    }
                </ul>
                }
            }else{
                <li class="nav-item px-1">
                <NavLink class="nav-link" href="@userUrl">
                   @uiData.Mapping[currentGroup]
                </NavLink>
                </li>
            }
        }
        //We skip he first element beuase it is allways the "Clientname+limit" group representing the whole client, which we are technically already in by selecting the clients name.
        
        if (heirachy.Length>0){
            foreach (var group in heirachy[1])
            {   
                ListOp (group.Value,group.Key, 1 );
            }
        }
    }
    
}
<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">@(Getter.uiConfig.SideHeading)</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>
<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav-list ">
       @if(Getter.status==Status.Connected){ 
            var clients=Getter.TransClientData.OrderByDescending((client)=>client.Value.DisplayPriority);
            foreach (var client in clients)
            {
                string url= "/JobList/"+client.Key+"/-1";

                RenderFragment Status(){if (!client.Value.ClientConnected){return @<span style="color: red; padding-left: 0.5em;"> Disconnected</span>; } else return @<div></div>;}
                
                <li class="nav-item px-1">
                    <NavLink class="nav-link" href="@url" @onclick="()=>{selectedUser=client.Key;selections[0]=-1;}">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> @(client.Key)@(" ")@Status()
                    </NavLink>
                    @if(client.Key==selectedUser){
                        <ul class="nav-list ">
                            @{wrap(client.Value.Heirachy,client.Key,client.Value);}
                        </ul>
                    }
                </li>
                
            }
            }
         
    </ul>
</div>

@code {
    private string selectedUser = "";
    private int[] selections = Enumerable.Range(-50,20).ToArray();
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    protected override async Task OnInitializedAsync()
    {
        //We set the group from the url so that the subnav can be show even when a user hasn't clicked on a group
        selectedUser = UriHelper.Uri.Split('/')[3];
        //TODO: this shoudl really only triger when the sie of the mian dictionary gets longer
        Getter.newData += StateHasChanged;
    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
