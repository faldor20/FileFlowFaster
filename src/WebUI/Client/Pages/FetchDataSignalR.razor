@page "/JobList/{User}/{GroupString}"
@page "/JobList/{User}/"
@page "/JobList/"
@using System.Collections.Generic
@using blaz.Data
@using System;
@using System.Threading
@using System.Threading.Tasks
@using static SharedFs.SharedTypes;
@using System.Linq
@using WebUI.Data
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject DataGetter Getter
@inject NavigationManager UriHelper
@code{
    
    [Parameter]
    public string GroupString { get; set; }

    [Parameter]
    public string User { get; set; }
    
    public int Group;
    protected override async Task OnInitializedAsync()
    {
        Getter.newData +=new Action(()=>{
        Console.WriteLine("StateChanged|Main");
         this.StateHasChanged();});
        if(GroupString==null||GroupString=="") Group=-1;
        else if( int.TryParse(GroupString,out Group));
        else if(Getter.TransClientData[User].Mapping.ContainsValue(GroupString)){
            //TODO: this wil not necissarily work if there are groups with the same names
            Getter.TransClientData[User].Mapping.First(x=>x.Value==GroupString);
        }
        User = User ?? "All";

    }
    
    protected override async Task OnParametersSetAsync()
    {  
        if(GroupString==null||GroupString=="") Group=-1; 
        else  int.TryParse(GroupString,out Group);
        User = User ?? "All";
        
    // This event will fire when the parameters change
    // Put your code here.  
    this.StateHasChanged();
    }
    }

<h2>@(Getter.uiConfig.Heading)</h2>
<p>Connected to transfer server at: @Getter.transferServerUrl</p>

@if (Getter.status==Status.Loading)
{
    <p><em>Loading...</em></p>
}
else if (Getter.status==Status.NoConnection){
<p><em>Connot Connect to server</em></p>
}
else if (Getter.status==Status.DataError){
<p><em>Data recieved is malformed</em></p>
}
else
{
<table class="table">
    <div>
            @if (User == "All"||!Getter.TransClientData.ContainsKey(User))
            {  
                @* var tasks=Getter.TransClientData.SelectMany(user => user.Value.Jobs.Select(task=>(user:user.Key,task:task.JobID,scheduledTime:user.Value.TransferDataList[task.JobID].ScheduledTime))).OrderByDescending(data => data.scheduledTime).ToList();
                Console.WriteLine("loading all tasks. Count= "+tasks.Count);
                foreach (var task in tasks)
                {   
                    <TransferTaskRender index="@task.task" userName="@task.user" > </TransferTaskRender>
                    
                }  *@
                <div> Please select a group from the left side</div>
            }
            else {
                var uiData= Getter.TransClientData[User];
                <UserRender UserData="@uiData" Group="@Group" UserName="@User" />
                    
                }
    </div>
</table>
}

